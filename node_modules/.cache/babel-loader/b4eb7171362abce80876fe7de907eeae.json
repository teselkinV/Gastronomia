{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/vladimir/Desktop/Gastronomia/src/components/Language/Language.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, createContext, useContext } from 'react';\nimport { languageOptions, dictionaryList } from './languages/index'; // create the language context with default selected language\n\nexport const LanguageContext = /*#__PURE__*/createContext({\n  userLanguage: 'en',\n  dictionary: dictionaryList.en\n}); // it provides the language context to app\n\nexport function LanguageProvider({\n  children\n}) {\n  _s();\n\n  const defaultLanguage = window.localStorage.getItem('rcml-lang');\n  const [userLanguage, setUserLanguage] = useState(defaultLanguage || 'en');\n  const provider = {\n    userLanguage,\n    dictionary: dictionaryList[userLanguage],\n    userLanguageChange: selected => {\n      const newLanguage = languageOptions[selected] ? selected : 'en';\n      setUserLanguage(newLanguage);\n      window.localStorage.setItem('rcml-lang', newLanguage);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: provider,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LanguageProvider, \"kE7MI2I8wpiTbL849r/sp7ZZ8pk=\");\n\n_c = LanguageProvider;\n; // get text according to id & current language\n\nexport function Text({\n  t\n}) {\n  _s2();\n\n  const languageContext = useContext(LanguageContext);\n  return languageContext.dictionary[t] || t;\n}\n\n_s2(Text, \"u9AvBXXtB+3fBY3kFdreK4eFNCI=\");\n\n_c2 = Text;\n;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LanguageProvider\");\n$RefreshReg$(_c2, \"Text\");","map":{"version":3,"sources":["/Users/vladimir/Desktop/Gastronomia/src/components/Language/Language.js"],"names":["React","useState","createContext","useContext","languageOptions","dictionaryList","LanguageContext","userLanguage","dictionary","en","LanguageProvider","children","defaultLanguage","window","localStorage","getItem","setUserLanguage","provider","userLanguageChange","selected","newLanguage","setItem","Text","t","languageContext"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,EAAyCC,UAAzC,QAA2D,OAA3D;AAEA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,mBAAhD,C,CAEA;;AACA,OAAO,MAAMC,eAAe,gBAAGJ,aAAa,CAAC;AAC3CK,EAAAA,YAAY,EAAE,IAD6B;AAE3CC,EAAAA,UAAU,EAAEH,cAAc,CAACI;AAFgB,CAAD,CAArC,C,CAKP;;AACA,OAAO,SAASC,gBAAT,CAA0B;AAAEC,EAAAA;AAAF,CAA1B,EAAwC;AAAA;;AAC7C,QAAMC,eAAe,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,WAA5B,CAAxB;AACA,QAAM,CAACR,YAAD,EAAeS,eAAf,IAAkCf,QAAQ,CAACW,eAAe,IAAI,IAApB,CAAhD;AAEA,QAAMK,QAAQ,GAAG;AACfV,IAAAA,YADe;AAEfC,IAAAA,UAAU,EAAEH,cAAc,CAACE,YAAD,CAFX;AAGfW,IAAAA,kBAAkB,EAAEC,QAAQ,IAAI;AAC9B,YAAMC,WAAW,GAAGhB,eAAe,CAACe,QAAD,CAAf,GAA4BA,QAA5B,GAAuC,IAA3D;AACAH,MAAAA,eAAe,CAACI,WAAD,CAAf;AACAP,MAAAA,MAAM,CAACC,YAAP,CAAoBO,OAApB,CAA4B,WAA5B,EAAyCD,WAAzC;AACD;AAPc,GAAjB;AAUA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEH,QAAjC;AAAA,cACGN;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAnBeD,gB;;KAAAA,gB;AAmBf,C,CAED;;AACA,OAAO,SAASY,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAAqB;AAAA;;AAC1B,QAAMC,eAAe,GAAGrB,UAAU,CAACG,eAAD,CAAlC;AAEA,SAAOkB,eAAe,CAAChB,UAAhB,CAA2Be,CAA3B,KAAiCA,CAAxC;AACD;;IAJeD,I;;MAAAA,I;AAIf","sourcesContent":["import React, { useState, createContext, useContext } from 'react';\n\nimport { languageOptions, dictionaryList } from './languages/index';\n\n// create the language context with default selected language\nexport const LanguageContext = createContext({\n  userLanguage: 'en',\n  dictionary: dictionaryList.en\n});\n\n// it provides the language context to app\nexport function LanguageProvider({ children }) {\n  const defaultLanguage = window.localStorage.getItem('rcml-lang');\n  const [userLanguage, setUserLanguage] = useState(defaultLanguage || 'en');\n\n  const provider = {\n    userLanguage,\n    dictionary: dictionaryList[userLanguage],\n    userLanguageChange: selected => {\n      const newLanguage = languageOptions[selected] ? selected : 'en'\n      setUserLanguage(newLanguage);\n      window.localStorage.setItem('rcml-lang', newLanguage);\n    }\n  };\n\n  return (\n    <LanguageContext.Provider value={provider}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n\n// get text according to id & current language\nexport function Text({ t }) {\n  const languageContext = useContext(LanguageContext);\n\n  return languageContext.dictionary[t] || t;\n};\n"]},"metadata":{},"sourceType":"module"}